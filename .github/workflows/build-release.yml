name: Build & Release

on:
  push:
    tags:
      - 'v*' # tag pattern for releases: v1.0.0, v0.2.1, etc.

permissions:
  contents: write

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            asset_name: cinnamon-profile-manager-x86_64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x.x

      - name: Get version from tag
        id: get_version
        shell: bash
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version: ${VERSION}"
          # check if this is a 0.x release (starts with 0.)
          if [[ $VERSION == 0.* ]]; then
            echo "IS_PRERELEASE=true" >> $GITHUB_OUTPUT
            echo "This is a pre-release version"
          else
            echo "IS_PRERELEASE=false" >> $GITHUB_OUTPUT
            echo "This is a stable release version"
          fi

      - name: Compile binary
        run: |
          deno compile --target ${{ matrix.target }} --allow-env=TF_BUILD,TERM,CI,TEAMCITY_VERSION,COLORTERM,COLOR,ANSI_COLORS,BEARZ_ANSI_COLOR,CLICOLOR_FORCE,CINNAMON_PROFILES_DIR,DCONF_SETTINGS_FILE,HOME --allow-sys=osRelease --allow-read --allow-write --allow-run=cp,rm,which,zip,unzip,dconf --output ${{ matrix.asset_name }} main.ts
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: ${{ matrix.asset_name }}
          retention-days: 1

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version from tag
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version: ${VERSION}"
          # Check if this is a 0.x release (starts with 0.)
          if [[ $VERSION == 0.* ]]; then
            echo "IS_PRERELEASE=true" >> $GITHUB_OUTPUT
            echo "This is a pre-release version"
          else
            echo "IS_PRERELEASE=false" >> $GITHUB_OUTPUT
            echo "This is a stable release version"
          fi
      
      - name: Extract changelog for version
        id: changelog
        run: |
          CURRENT_VERSION="v${{ steps.get_version.outputs.VERSION }}"
          echo "Extracting changelog for ${CURRENT_VERSION}"
          CHANGELOG_SECTION=$(awk -v version="${CURRENT_VERSION}" '
            BEGIN { found=0; }
            /^## '"${CURRENT_VERSION}"'/ { found=1; next; }
            /^## v[0-9]+\.[0-9]+\.[0-9]+/ { if (found) exit; }
            { if (found) print; }
          ' CHANGELOG.md)
          CHANGELOG_SECTION="${CHANGELOG_SECTION//'%'/'%25'}"
          CHANGELOG_SECTION="${CHANGELOG_SECTION//$'\n'/'%0A'}"
          CHANGELOG_SECTION="${CHANGELOG_SECTION//$'\r'/'%0D'}"
          echo "CHANGELOG_SECTION<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG_SECTION" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: List artifacts
        run: find ./artifacts -type f | sort

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          name: Cinnamon Profile Manager v${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: ${{ steps.get_version.outputs.IS_PRERELEASE }}
          files: |
            ./artifacts/cinnamon-profile-manager-x86_64/cinnamon-profile-manager-x86_64
          body: |
            ${{ steps.get_version.outputs.IS_PRERELEASE == 'true' && '> ⚠️ **Pre-release version**: This is a development release and may contain bugs or incomplete features.' || '> ✅ **Stable release**: This version is considered stable for production use.' }}
            
            ## What's New

            ${{ steps.changelog.outputs.CHANGELOG_SECTION }}

            ## Installation
            
            Download the binary:
            
            - `cinnamon-profile-manager-x86_64`
            
            Make the file executable:
            ```bash
            chmod +x cinnamon-profile-manager-*
            ```
            
            For more details, see the [README](https://github.com/${{ github.repository }}/blob/main/README.md).
            
            ## Prerequisites
            
            These binaries require the following to be installed on your system:
            - `zip` and `unzip` utilities
            - `dconf` (usually installed with Cinnamon)
            
            See the [README](https://github.com/${{ github.repository }}/blob/main/README.md) for full details.
